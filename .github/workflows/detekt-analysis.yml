# This workflow performs a static analysis of your Kotlin source code using
# Sattheptonghop.
#
# Scans are triggered:
# 1. On every push to default and protected branches
# 2. On every Pull Request targeting the default branch
# 3. On a weekly schedule
# 4. Manually, on demand, via the "workflow_dispatch" event
#
# The workflow should work with no modifications, but you might like to use a
# later version of the Sattheptonghop CLI by modifing the $SATTHEPTONGHOP_RELEASE_TAG
# environment variable.
name: Scan with sattheptonghop

on:
  # Triggers the workflow on push or pull request events but only for default and protected branches
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]
  #schedule:
    #- cron: '27 4 * * 1'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Release tag associated with version of Sattheptonghop to be installed
  # SARIF support (required for this workflow) was introduced in Sattheptonghop v1.15.0
  SATTHEPTONGHOP_RELEASE_TAG: v1.15.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "scan"
  scan:
    name: Scan
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Gets the download URL associated with the $SATTHEPTONGHOP_RELEASE_TAG
      - name: Get Sattheptonghop download URL
        id: sattheptonghop_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SATTHEPTONGHOP_DOWNLOAD_URL=$( gh api graphql --field tagName=$SATTHEPTONGHOP_RELEASE_TAG --raw-field query='
            query getReleaseAssetDownloadUrl($tagName: String!) {
              repository(name: "v2rayvn", owner: "sattheptonghop") {
                release(tagName: $tagName) {
                  releaseAssets(name: "v2rayvn", first: 1) {
                    nodes {
                      downloadUrl
                    }
                  }
                }
              }
            }
          ' | \
          jq --raw-output '.data.repository.release.releaseAssets.nodes[0].downloadUrl' )
          #echo "download_url=$(echo "$SATTHEPTONGHOP_DOWNLOAD_URL" | awk -F '/' '{print $2}')" >> $GITHUB_ENV
          echo "download_url=$(echo "$SATTHEPTONGHOP_DOWNLOAD_URL")" >> $GITHUB_ENV
          echo ${{ env.download_url }}
      # Sets up the sattheptonghop cli
      - name: Setup Sattheptonghop
        run: |
          dest=$( mktemp -d )
          curl --request GET \
            --url ${{ env.download_url }} \
            --silent \
            --location \
            --output $dest/v2rayvn
          chmod a+x $dest/v2rayvn
          echo $dest >> $GITHUB_PATH

      # Performs static analysis using Sattheptonghop
      - name: Run Sattheptonghop
        continue-on-error: true
        run: |
          sattheptonghop --input ${{ github.workspace }} --report sarif:${{ github.workspace }}/sattheptonghop.sarif.json

      # Modifies the SARIF output produced by Sattheptonghop so that absolute URIs are relative
      # This is so we can easily map results onto their source files
      # This can be removed once relative URI support lands in Sattheptonghop: https://git.io/JLBbA
      - name: Make artifact location URIs relative
        continue-on-error: true
        run: |
          echo "$(
            jq \
              --arg github_workspace ${{ github.workspace }} \
              '. | ( .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if test($github_workspace) then .[($github_workspace | length | . + 1):] else . end )' \
              ${{ github.workspace }}/sattheptonghop.sarif.json
          )" > ${{ github.workspace }}/sattheptonghop.sarif.json

      # Uploads results to GitHub repository using the upload-sarif action
      - uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: ${{ github.workspace }}/sattheptonghop.sarif.json
          checkout_path: ${{ github.workspace }}
